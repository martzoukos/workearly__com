/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment ButtonFields on Actions {\n    __typename\n    sys {\n      id\n    }\n    name\n    style\n    color\n    external\n    arrow\n    popupUrl\n    email\n    telephone\n    internal {\n      slug\n      sys {\n        id\n      }\n    }\n  }\n": types.ButtonFieldsFragmentDoc,
    "\n  fragment PageFields on Page {\n    __typename\n    sys {\n      id\n    }\n    name\n    slug\n    seoTitle\n    seoDescription\n    seoImage {\n      url\n      width\n      height\n      description\n    }\n    type\n    supertitleShortText\n    tags\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n  }\n": types.PageFieldsFragmentDoc,
    "\n  fragment SliceFields on Slice {\n    sys {\n      id\n    }\n    superIcon {\n      url\n      width\n      height\n    }\n    superTitle {\n      json\n    }\n    title\n    logo {\n      url\n      width\n      height\n    }\n    role\n    description {\n      json\n    }\n    icon {\n      url\n      width\n      height\n    }\n    buttonsCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    color\n    type\n    topDistance\n    bottomDistance\n  }\n": types.SliceFieldsFragmentDoc,
    "\n  fragment TabHolderFields on TabHolder {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    headerStyle\n    icon {\n      url\n      width\n      height\n    }\n    actionsCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    type\n    colorScheme\n    topDistance\n    bottomDistance\n    tabsCollection(limit: 10) {\n      items {\n        tabTitle\n        tabDescription\n        tabIcon {\n          url\n          width\n          height\n        }\n        mediaAlignment\n        contentTitle\n        contentDescription\n        contentList\n        actionsCollection(limit: 2) {\n          items {\n            ...ButtonFields\n          }\n        }\n        contentBody {\n          json\n        }\n        contentImage {\n          width\n          height\n          url\n        }\n      }\n    }\n  }\n": types.TabHolderFieldsFragmentDoc,
    "\n  fragment CaseStudyFields on CaseStudy {\n    sys {\n      id\n    }\n    title\n    titleSize\n    description {\n      json\n    }\n    colorTheme\n    statistics\n    statisticsSymbol\n    statisticsDescription\n    icon {\n      url\n      width\n      height\n    }\n    topDistance\n    bottomDistance\n    imageCollection(limit: 4) {\n      items {\n        sys {\n          id\n        }\n        width\n        height\n        url\n      }\n    }\n    testimonial {\n      json\n    }\n    testimonialAuthor\n    testimonialRole\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n": types.CaseStudyFieldsFragmentDoc,
    "\n  fragment LogoSliderFields on LogoSlider {\n    sys {\n      id\n    }\n    title\n    titleSize\n    description {\n      json\n    }\n    type\n    moving\n    background\n    topDistance\n    bottomDistance\n    icon {\n      url\n      width\n      height\n    }\n    mediaCollection(limit: 20) {\n      items {\n        url\n        width\n        height\n      }\n    }\n  }\n": types.LogoSliderFieldsFragmentDoc,
    "\n  fragment HeroFields on Hero {\n    sys {\n      id\n    }\n    title\n    titleTags\n    subtitle\n    backgroundColor\n    disclaimer\n    description {\n      json\n    }\n    type\n    contentList\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n": types.HeroFieldsFragmentDoc,
    "\n  fragment StandardComponentFields on StandardComponent {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    featuers\n    textPosition\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    actionCollection {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n": types.StandardComponentFieldsFragmentDoc,
    "\n  fragment CardHolderFields on CardHolder {\n    sys {\n      id\n    }\n    title\n    colorTheme\n    type\n    icon {\n      url\n      width\n      height\n    }\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n    description {\n      json\n    }\n    titleSize\n    topDistance\n    bottomDistance\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    cardDataCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        time\n        textColor\n        description {\n          json\n        }\n        media {\n          url\n          width\n          height\n        }\n        name\n        role\n        action {\n          ...ButtonFields\n        }\n      }\n    }\n  }\n": types.CardHolderFieldsFragmentDoc,
    "\n  fragment RichTextFields on ContentTypeRichText {\n    sys {\n      id\n    }\n    title\n    extract\n    applyButton {\n      style\n      external\n      arrow\n      color\n      name\n      popupUrl\n      email\n      telephone\n      internal {\n        sys {\n          id\n        }\n      }\n    }\n    body {\n      json\n    }\n  }\n": types.RichTextFieldsFragmentDoc,
    "\n  fragment UniqueComponentsFields on UniqueComponent {\n    sys {\n      id\n    }\n    type\n    json\n    topDistance\n    bottomDistance\n  }\n": types.UniqueComponentsFieldsFragmentDoc,
    "\n  fragment BenefitsCtaFields on BenefitsCta {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    points\n    details\n    topDistance\n    bottomDistance\n    colorTheme\n    icon {\n      url\n      width\n      height\n    }\n    media {\n      url\n      width\n      height\n    }\n    mediaAlignment\n    button {\n      ...ButtonFields\n    }\n  }\n": types.BenefitsCtaFieldsFragmentDoc,
    "\n  fragment CaseIntroFields on CaseIntro {\n    sys {\n      id\n    }\n    title\n    subtitle\n    topDistance\n    bottomDistance\n    description {\n      json\n    }\n    logo {\n      url\n      width\n      height\n    }\n    miniCardsCollection(limit: 5) {\n      items {\n        title\n        media {\n          url\n          width\n          height\n        }\n      }\n    }\n  }\n": types.CaseIntroFieldsFragmentDoc,
    "\n  fragment CaseSummaryFields on CaseSummary {\n    sys {\n      id\n    }\n    title\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    keyInsightCollection(limit: 8) {\n      items {\n        title\n        description {\n          json\n        }\n      }\n    }\n  }\n": types.CaseSummaryFieldsFragmentDoc,
    "\n  fragment ChallengeWithQuoteFields on ChallengeWithQuote {\n    sys {\n      id\n    }\n    title\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    challenge {\n      json\n    }\n    quote {\n      json\n    }\n    quoteMedia {\n      url\n      width\n      height\n    }\n    quoteAuthor\n    jobTitle\n  }\n": types.ChallengeWithQuoteFieldsFragmentDoc,
    "\n  query PageSlugs {\n    pageCollection(limit: 100, where: { slug_not_in: [\"404\"] }) {\n      items {\n        slug\n      }\n    }\n  }\n": types.PageSlugsDocument,
    "\n  query Page($slug: String!) {\n    pageCollection(where: { slug: $slug }, limit: 1) {\n      __typename\n      items {\n        ...PageFields\n        contentCollection {\n          __typename\n          items {\n            __typename\n          }\n        }\n      }\n    }\n  }\n": types.PageDocument,
    "\n  query PageContent($slug: String!, $limit: Int, $skip: Int) {\n    pageCollection(where: { slug: $slug }, limit: 1) {\n      __typename\n      items {\n        contentCollection(limit: $limit, skip: $skip) {\n          __typename\n          items {\n            __typename\n            ...SliceFields\n            ...TabHolderFields\n            ...CaseStudyFields\n            ...LogoSliderFields\n            ...HeroFields\n            ...StandardComponentFields\n            ...CardHolderFields\n            ...RichTextFields\n            ...UniqueComponentsFields\n            ...BenefitsCtaFields\n            ...CaseIntroFields\n            ...CaseSummaryFields\n            ...ChallengeWithQuoteFields\n          }\n        }\n      }\n    }\n  }\n": types.PageContentDocument,
    "\n  query Asset($id: String!) {\n    asset(id: $id) {\n      title\n      description\n      contentType\n      url\n      width\n      height\n    }\n  }\n": types.AssetDocument,
    "\n  query Entry($id: String!) {\n    entryCollection(limit: 1, where: { sys: { id: $id } }) {\n      items {\n        __typename\n        sys {\n          id\n        }\n        ... on Page {\n          slug\n        }\n        ... on Slice {\n          ...SliceFields\n        }\n        ... on TabHolder {\n          ...TabHolderFields\n        }\n        ... on CaseStudy {\n          ...CaseStudyFields\n        }\n        ... on LogoSlider {\n          ...LogoSliderFields\n        }\n        ... on CardHolder {\n          ...CardHolderFields\n        }\n        ... on BenefitsCta {\n          ...BenefitsCtaFields\n        }\n        ... on CaseIntro {\n          ...CaseIntroFields\n        }\n        ... on CaseSummary {\n          ...CaseSummaryFields\n        }\n        ... on ChallengeWithQuote {\n          ...ChallengeWithQuoteFields\n        }\n        ... on Actions {\n          ...ButtonFields\n        }\n      }\n    }\n  }\n": types.EntryDocument,
    "\n  query Header {\n    uniqueComponentCollection(limit: 1, where: { type: \"Menu\" }) {\n      items {\n        sys {\n          id\n        }\n        json\n      }\n    }\n  }\n": types.HeaderDocument,
    "\n  query Footer {\n    uniqueComponentCollection(limit: 1, where: { type: \"Footer\" }) {\n      items {\n        sys {\n          id\n        }\n        json\n      }\n    }\n  }\n": types.FooterDocument,
    "\n  query pageWithRichText {\n    pageCollection(limit: 20) {\n      items {\n        slug\n        contentCollection {\n          items {\n            __typename\n            ... on ContentTypeRichText {\n              ...RichTextFields\n            }\n          }\n        }\n      }\n    }\n  }\n": types.PageWithRichTextDocument,
    "\n  query RichTextWithLimit($limit: Int, $type: String, $tag: String) {\n    pageCollection(\n      limit: $limit\n      where: { type: $type, tags_contains_some: [$tag] }\n    ) {\n      items {\n        sys {\n          id\n        }\n        name\n        supertitleShortText\n        media {\n          url\n          width\n          height\n        }\n        slug\n        tags\n      }\n    }\n  }\n": types.RichTextWithLimitDocument,
    "\n  query AllRichText($limit: Int, $type: String) {\n    pageCollection(limit: $limit, where: { type: $type }) {\n      items {\n        sys {\n          id\n        }\n        name\n        supertitleShortText\n        media {\n          url\n          width\n          height\n        }\n        slug\n        tags\n      }\n    }\n  }\n": types.AllRichTextDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ButtonFields on Actions {\n    __typename\n    sys {\n      id\n    }\n    name\n    style\n    color\n    external\n    arrow\n    popupUrl\n    email\n    telephone\n    internal {\n      slug\n      sys {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ButtonFields on Actions {\n    __typename\n    sys {\n      id\n    }\n    name\n    style\n    color\n    external\n    arrow\n    popupUrl\n    email\n    telephone\n    internal {\n      slug\n      sys {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PageFields on Page {\n    __typename\n    sys {\n      id\n    }\n    name\n    slug\n    seoTitle\n    seoDescription\n    seoImage {\n      url\n      width\n      height\n      description\n    }\n    type\n    supertitleShortText\n    tags\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n  }\n"): (typeof documents)["\n  fragment PageFields on Page {\n    __typename\n    sys {\n      id\n    }\n    name\n    slug\n    seoTitle\n    seoDescription\n    seoImage {\n      url\n      width\n      height\n      description\n    }\n    type\n    supertitleShortText\n    tags\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SliceFields on Slice {\n    sys {\n      id\n    }\n    superIcon {\n      url\n      width\n      height\n    }\n    superTitle {\n      json\n    }\n    title\n    logo {\n      url\n      width\n      height\n    }\n    role\n    description {\n      json\n    }\n    icon {\n      url\n      width\n      height\n    }\n    buttonsCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    color\n    type\n    topDistance\n    bottomDistance\n  }\n"): (typeof documents)["\n  fragment SliceFields on Slice {\n    sys {\n      id\n    }\n    superIcon {\n      url\n      width\n      height\n    }\n    superTitle {\n      json\n    }\n    title\n    logo {\n      url\n      width\n      height\n    }\n    role\n    description {\n      json\n    }\n    icon {\n      url\n      width\n      height\n    }\n    buttonsCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    color\n    type\n    topDistance\n    bottomDistance\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TabHolderFields on TabHolder {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    headerStyle\n    icon {\n      url\n      width\n      height\n    }\n    actionsCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    type\n    colorScheme\n    topDistance\n    bottomDistance\n    tabsCollection(limit: 10) {\n      items {\n        tabTitle\n        tabDescription\n        tabIcon {\n          url\n          width\n          height\n        }\n        mediaAlignment\n        contentTitle\n        contentDescription\n        contentList\n        actionsCollection(limit: 2) {\n          items {\n            ...ButtonFields\n          }\n        }\n        contentBody {\n          json\n        }\n        contentImage {\n          width\n          height\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TabHolderFields on TabHolder {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    headerStyle\n    icon {\n      url\n      width\n      height\n    }\n    actionsCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    type\n    colorScheme\n    topDistance\n    bottomDistance\n    tabsCollection(limit: 10) {\n      items {\n        tabTitle\n        tabDescription\n        tabIcon {\n          url\n          width\n          height\n        }\n        mediaAlignment\n        contentTitle\n        contentDescription\n        contentList\n        actionsCollection(limit: 2) {\n          items {\n            ...ButtonFields\n          }\n        }\n        contentBody {\n          json\n        }\n        contentImage {\n          width\n          height\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CaseStudyFields on CaseStudy {\n    sys {\n      id\n    }\n    title\n    titleSize\n    description {\n      json\n    }\n    colorTheme\n    statistics\n    statisticsSymbol\n    statisticsDescription\n    icon {\n      url\n      width\n      height\n    }\n    topDistance\n    bottomDistance\n    imageCollection(limit: 4) {\n      items {\n        sys {\n          id\n        }\n        width\n        height\n        url\n      }\n    }\n    testimonial {\n      json\n    }\n    testimonialAuthor\n    testimonialRole\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CaseStudyFields on CaseStudy {\n    sys {\n      id\n    }\n    title\n    titleSize\n    description {\n      json\n    }\n    colorTheme\n    statistics\n    statisticsSymbol\n    statisticsDescription\n    icon {\n      url\n      width\n      height\n    }\n    topDistance\n    bottomDistance\n    imageCollection(limit: 4) {\n      items {\n        sys {\n          id\n        }\n        width\n        height\n        url\n      }\n    }\n    testimonial {\n      json\n    }\n    testimonialAuthor\n    testimonialRole\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LogoSliderFields on LogoSlider {\n    sys {\n      id\n    }\n    title\n    titleSize\n    description {\n      json\n    }\n    type\n    moving\n    background\n    topDistance\n    bottomDistance\n    icon {\n      url\n      width\n      height\n    }\n    mediaCollection(limit: 20) {\n      items {\n        url\n        width\n        height\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment LogoSliderFields on LogoSlider {\n    sys {\n      id\n    }\n    title\n    titleSize\n    description {\n      json\n    }\n    type\n    moving\n    background\n    topDistance\n    bottomDistance\n    icon {\n      url\n      width\n      height\n    }\n    mediaCollection(limit: 20) {\n      items {\n        url\n        width\n        height\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HeroFields on Hero {\n    sys {\n      id\n    }\n    title\n    titleTags\n    subtitle\n    backgroundColor\n    disclaimer\n    description {\n      json\n    }\n    type\n    contentList\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment HeroFields on Hero {\n    sys {\n      id\n    }\n    title\n    titleTags\n    subtitle\n    backgroundColor\n    disclaimer\n    description {\n      json\n    }\n    type\n    contentList\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StandardComponentFields on StandardComponent {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    featuers\n    textPosition\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    actionCollection {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment StandardComponentFields on StandardComponent {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    featuers\n    textPosition\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    actionCollection {\n      items {\n        ...ButtonFields\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CardHolderFields on CardHolder {\n    sys {\n      id\n    }\n    title\n    colorTheme\n    type\n    icon {\n      url\n      width\n      height\n    }\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n    description {\n      json\n    }\n    titleSize\n    topDistance\n    bottomDistance\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    cardDataCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        time\n        textColor\n        description {\n          json\n        }\n        media {\n          url\n          width\n          height\n        }\n        name\n        role\n        action {\n          ...ButtonFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CardHolderFields on CardHolder {\n    sys {\n      id\n    }\n    title\n    colorTheme\n    type\n    icon {\n      url\n      width\n      height\n    }\n    media {\n      url\n      width\n      height\n    }\n    mediaMobile {\n      url\n      width\n      height\n    }\n    description {\n      json\n    }\n    titleSize\n    topDistance\n    bottomDistance\n    actionCollection(limit: 2) {\n      items {\n        ...ButtonFields\n      }\n    }\n    cardDataCollection(limit: 10) {\n      items {\n        sys {\n          id\n        }\n        title\n        time\n        textColor\n        description {\n          json\n        }\n        media {\n          url\n          width\n          height\n        }\n        name\n        role\n        action {\n          ...ButtonFields\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RichTextFields on ContentTypeRichText {\n    sys {\n      id\n    }\n    title\n    extract\n    applyButton {\n      style\n      external\n      arrow\n      color\n      name\n      popupUrl\n      email\n      telephone\n      internal {\n        sys {\n          id\n        }\n      }\n    }\n    body {\n      json\n    }\n  }\n"): (typeof documents)["\n  fragment RichTextFields on ContentTypeRichText {\n    sys {\n      id\n    }\n    title\n    extract\n    applyButton {\n      style\n      external\n      arrow\n      color\n      name\n      popupUrl\n      email\n      telephone\n      internal {\n        sys {\n          id\n        }\n      }\n    }\n    body {\n      json\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UniqueComponentsFields on UniqueComponent {\n    sys {\n      id\n    }\n    type\n    json\n    topDistance\n    bottomDistance\n  }\n"): (typeof documents)["\n  fragment UniqueComponentsFields on UniqueComponent {\n    sys {\n      id\n    }\n    type\n    json\n    topDistance\n    bottomDistance\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment BenefitsCtaFields on BenefitsCta {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    points\n    details\n    topDistance\n    bottomDistance\n    colorTheme\n    icon {\n      url\n      width\n      height\n    }\n    media {\n      url\n      width\n      height\n    }\n    mediaAlignment\n    button {\n      ...ButtonFields\n    }\n  }\n"): (typeof documents)["\n  fragment BenefitsCtaFields on BenefitsCta {\n    sys {\n      id\n    }\n    title\n    description {\n      json\n    }\n    points\n    details\n    topDistance\n    bottomDistance\n    colorTheme\n    icon {\n      url\n      width\n      height\n    }\n    media {\n      url\n      width\n      height\n    }\n    mediaAlignment\n    button {\n      ...ButtonFields\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CaseIntroFields on CaseIntro {\n    sys {\n      id\n    }\n    title\n    subtitle\n    topDistance\n    bottomDistance\n    description {\n      json\n    }\n    logo {\n      url\n      width\n      height\n    }\n    miniCardsCollection(limit: 5) {\n      items {\n        title\n        media {\n          url\n          width\n          height\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CaseIntroFields on CaseIntro {\n    sys {\n      id\n    }\n    title\n    subtitle\n    topDistance\n    bottomDistance\n    description {\n      json\n    }\n    logo {\n      url\n      width\n      height\n    }\n    miniCardsCollection(limit: 5) {\n      items {\n        title\n        media {\n          url\n          width\n          height\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CaseSummaryFields on CaseSummary {\n    sys {\n      id\n    }\n    title\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    keyInsightCollection(limit: 8) {\n      items {\n        title\n        description {\n          json\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CaseSummaryFields on CaseSummary {\n    sys {\n      id\n    }\n    title\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    keyInsightCollection(limit: 8) {\n      items {\n        title\n        description {\n          json\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChallengeWithQuoteFields on ChallengeWithQuote {\n    sys {\n      id\n    }\n    title\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    challenge {\n      json\n    }\n    quote {\n      json\n    }\n    quoteMedia {\n      url\n      width\n      height\n    }\n    quoteAuthor\n    jobTitle\n  }\n"): (typeof documents)["\n  fragment ChallengeWithQuoteFields on ChallengeWithQuote {\n    sys {\n      id\n    }\n    title\n    topDistance\n    bottomDistance\n    media {\n      url\n      width\n      height\n    }\n    challenge {\n      json\n    }\n    quote {\n      json\n    }\n    quoteMedia {\n      url\n      width\n      height\n    }\n    quoteAuthor\n    jobTitle\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageSlugs {\n    pageCollection(limit: 100, where: { slug_not_in: [\"404\"] }) {\n      items {\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  query PageSlugs {\n    pageCollection(limit: 100, where: { slug_not_in: [\"404\"] }) {\n      items {\n        slug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Page($slug: String!) {\n    pageCollection(where: { slug: $slug }, limit: 1) {\n      __typename\n      items {\n        ...PageFields\n        contentCollection {\n          __typename\n          items {\n            __typename\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Page($slug: String!) {\n    pageCollection(where: { slug: $slug }, limit: 1) {\n      __typename\n      items {\n        ...PageFields\n        contentCollection {\n          __typename\n          items {\n            __typename\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PageContent($slug: String!, $limit: Int, $skip: Int) {\n    pageCollection(where: { slug: $slug }, limit: 1) {\n      __typename\n      items {\n        contentCollection(limit: $limit, skip: $skip) {\n          __typename\n          items {\n            __typename\n            ...SliceFields\n            ...TabHolderFields\n            ...CaseStudyFields\n            ...LogoSliderFields\n            ...HeroFields\n            ...StandardComponentFields\n            ...CardHolderFields\n            ...RichTextFields\n            ...UniqueComponentsFields\n            ...BenefitsCtaFields\n            ...CaseIntroFields\n            ...CaseSummaryFields\n            ...ChallengeWithQuoteFields\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PageContent($slug: String!, $limit: Int, $skip: Int) {\n    pageCollection(where: { slug: $slug }, limit: 1) {\n      __typename\n      items {\n        contentCollection(limit: $limit, skip: $skip) {\n          __typename\n          items {\n            __typename\n            ...SliceFields\n            ...TabHolderFields\n            ...CaseStudyFields\n            ...LogoSliderFields\n            ...HeroFields\n            ...StandardComponentFields\n            ...CardHolderFields\n            ...RichTextFields\n            ...UniqueComponentsFields\n            ...BenefitsCtaFields\n            ...CaseIntroFields\n            ...CaseSummaryFields\n            ...ChallengeWithQuoteFields\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Asset($id: String!) {\n    asset(id: $id) {\n      title\n      description\n      contentType\n      url\n      width\n      height\n    }\n  }\n"): (typeof documents)["\n  query Asset($id: String!) {\n    asset(id: $id) {\n      title\n      description\n      contentType\n      url\n      width\n      height\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Entry($id: String!) {\n    entryCollection(limit: 1, where: { sys: { id: $id } }) {\n      items {\n        __typename\n        sys {\n          id\n        }\n        ... on Page {\n          slug\n        }\n        ... on Slice {\n          ...SliceFields\n        }\n        ... on TabHolder {\n          ...TabHolderFields\n        }\n        ... on CaseStudy {\n          ...CaseStudyFields\n        }\n        ... on LogoSlider {\n          ...LogoSliderFields\n        }\n        ... on CardHolder {\n          ...CardHolderFields\n        }\n        ... on BenefitsCta {\n          ...BenefitsCtaFields\n        }\n        ... on CaseIntro {\n          ...CaseIntroFields\n        }\n        ... on CaseSummary {\n          ...CaseSummaryFields\n        }\n        ... on ChallengeWithQuote {\n          ...ChallengeWithQuoteFields\n        }\n        ... on Actions {\n          ...ButtonFields\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Entry($id: String!) {\n    entryCollection(limit: 1, where: { sys: { id: $id } }) {\n      items {\n        __typename\n        sys {\n          id\n        }\n        ... on Page {\n          slug\n        }\n        ... on Slice {\n          ...SliceFields\n        }\n        ... on TabHolder {\n          ...TabHolderFields\n        }\n        ... on CaseStudy {\n          ...CaseStudyFields\n        }\n        ... on LogoSlider {\n          ...LogoSliderFields\n        }\n        ... on CardHolder {\n          ...CardHolderFields\n        }\n        ... on BenefitsCta {\n          ...BenefitsCtaFields\n        }\n        ... on CaseIntro {\n          ...CaseIntroFields\n        }\n        ... on CaseSummary {\n          ...CaseSummaryFields\n        }\n        ... on ChallengeWithQuote {\n          ...ChallengeWithQuoteFields\n        }\n        ... on Actions {\n          ...ButtonFields\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Header {\n    uniqueComponentCollection(limit: 1, where: { type: \"Menu\" }) {\n      items {\n        sys {\n          id\n        }\n        json\n      }\n    }\n  }\n"): (typeof documents)["\n  query Header {\n    uniqueComponentCollection(limit: 1, where: { type: \"Menu\" }) {\n      items {\n        sys {\n          id\n        }\n        json\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Footer {\n    uniqueComponentCollection(limit: 1, where: { type: \"Footer\" }) {\n      items {\n        sys {\n          id\n        }\n        json\n      }\n    }\n  }\n"): (typeof documents)["\n  query Footer {\n    uniqueComponentCollection(limit: 1, where: { type: \"Footer\" }) {\n      items {\n        sys {\n          id\n        }\n        json\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query pageWithRichText {\n    pageCollection(limit: 20) {\n      items {\n        slug\n        contentCollection {\n          items {\n            __typename\n            ... on ContentTypeRichText {\n              ...RichTextFields\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query pageWithRichText {\n    pageCollection(limit: 20) {\n      items {\n        slug\n        contentCollection {\n          items {\n            __typename\n            ... on ContentTypeRichText {\n              ...RichTextFields\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RichTextWithLimit($limit: Int, $type: String, $tag: String) {\n    pageCollection(\n      limit: $limit\n      where: { type: $type, tags_contains_some: [$tag] }\n    ) {\n      items {\n        sys {\n          id\n        }\n        name\n        supertitleShortText\n        media {\n          url\n          width\n          height\n        }\n        slug\n        tags\n      }\n    }\n  }\n"): (typeof documents)["\n  query RichTextWithLimit($limit: Int, $type: String, $tag: String) {\n    pageCollection(\n      limit: $limit\n      where: { type: $type, tags_contains_some: [$tag] }\n    ) {\n      items {\n        sys {\n          id\n        }\n        name\n        supertitleShortText\n        media {\n          url\n          width\n          height\n        }\n        slug\n        tags\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllRichText($limit: Int, $type: String) {\n    pageCollection(limit: $limit, where: { type: $type }) {\n      items {\n        sys {\n          id\n        }\n        name\n        supertitleShortText\n        media {\n          url\n          width\n          height\n        }\n        slug\n        tags\n      }\n    }\n  }\n"): (typeof documents)["\n  query AllRichText($limit: Int, $type: String) {\n    pageCollection(limit: $limit, where: { type: $type }) {\n      items {\n        sys {\n          id\n        }\n        name\n        supertitleShortText\n        media {\n          url\n          width\n          height\n        }\n        slug\n        tags\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;